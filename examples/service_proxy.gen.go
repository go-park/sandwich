// Code generated by sandwich. DO NOT EDIT.

package main

import (
	"context"

	"github.com/go-park/sandwich/examples/lib"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

type ServiceProxy struct {
	parent IService
}

func NewServiceProxy(parent IService) IService {
	return &ServiceProxy{parent: parent}
}

func (p *ServiceProxy) Foo(ctx context.Context, i int) (r0 interface{}, r1 error) {
	println("around before trans")
	err := lib.GetGormDB().Transaction(func(tx *gorm.DB) error {
		println("before trans")
		logrus.WithContext(ctx).WithField("func", "Foo").WithField("args", []interface{}{ctx, i})
		r0, r1 = p.parent.Foo(ctx, i)
		return r1
	})
	r1 = err
	println("around after trans")
	println("after trans")
	return r0, r1
}

func (p *ServiceProxy) Bar(ctx context.Context) (r0 string, r1 error) {
	r0, r1 = p.parent.Bar(ctx)
	return r0, r1
}

func (p *ServiceProxy) Baz(ctx context.Context) (r0 string, r1 error) {
	println("around before trans")
	err := lib.GetGormDB().Transaction(func(tx *gorm.DB) error {
		println("before trans")
		logrus.WithContext(ctx).WithField("func", "Baz").WithField("args", []interface{}{ctx})
		r0, r1 = p.parent.Baz(ctx)
		return r1
	})
	r1 = err
	println("around after trans")
	println("after trans")
	return r0, r1
}
