package astutils

import "html/template"

type ProxyData struct {
	Package         string
	Imports         []*ProxyImport
	ProxyStructName string
	Option          string
	Methods         []*ProxyMethod
	AbstractName    string
	ParentName      string
	InjectFields    []*ProxyInjectField
	Singleton       bool
}

type ProxyMethod struct {
	Name        string
	Params      string
	ParamNames  string
	Results     string
	ResultNames string
	Before      []any
	After       []any
}

type ProxyImport struct {
	Alias template.HTML
	Path  template.HTML
}

type ProxyInjectField struct {
	Var template.HTML
	Val template.HTML
}

const proxyTpl = `
// Code generated by sandwich. DO NOT EDIT.

package {{.Package}}

import (
	{{- range $i, $s := .Imports }}
	{{ $s.Alias}} {{ $s.Path}}
	{{- end}}
)

type {{ .ProxyStructName }} struct {
	parent {{ .ParentName }}
}


{{ if ne $.Singleton true}}
//@Component
func New{{ .ProxyStructName }}({{ $optLen := len .Option }} {{ if ne $optLen 0 }} opts ...{{ .Option }}	{{ end }}) {{ .AbstractName }} {
	pa := &{{ .ParentName }}{
	{{- range $i, $a := .InjectFields }}
	{{ $a.Var }}: {{ $a.Val }},
	{{- end }}
	}
	{{ if ne $optLen 0 }}
    for _, fn := range opts {
		fn(pa)
	}
	{{ end }}
	return pa
}
{{ else }}
var (
	_{{ .AbstractName }}Inst {{ .AbstractName }} 
	_{{ .AbstractName }}Once sync.Once
)

//@Component
func New{{ .ProxyStructName }}() {{ .AbstractName }} {
	_{{ .AbstractName }}Once.Do(func(){
		_{{ .AbstractName }}Inst = &{{ .ParentName }}{
			{{- range $i, $a := .InjectFields }}
			{{ $a.Var }}: {{ $a.Val }},
			{{- end }}
			}
	})
	return _{{ .AbstractName }}Inst
}
{{ end }}

{{ range .Methods }}
func (p *{{$.ProxyStructName}}) {{ .Name }} ({{ .Params }}) ({{ .Results }}) {
	{{- range $i, $s := .Before }}
	{{ $s }}
	{{- end }}
	{{- range $i, $s := .After }}
	{{ $s }}
	{{- end }}
	return {{ .ResultNames }}
}
{{ end }}
`

func GetProxyTpl() string {
	return proxyTpl
}

const (
	DefaultProxySuffix = "Proxy"
)
